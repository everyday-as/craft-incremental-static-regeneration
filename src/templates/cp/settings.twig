{% import "_includes/forms" as forms %}
{% import "incremental-static-regeneration/cp/macros" as macros %}

<div>
    {% if settings.hasErrors('global') %}
        {% include "_includes/forms/errorList" with { errors: settings.getErrors('global') } %}
    {% endif %}

    <h2>{{ 'ISR'|t('incremental-static-regeneration') }}</h2>

    <p>
        This requires some setting up in your front-end. If you are using NextJS you can follow the following documentation: <a
                href="https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration" target="_blank">https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration</a>
    </p>

    {{ forms.textField({
        first:        true,
        label:        'ISR endpoint URL'|t('incremental-static-regeneration'),
        instructions: 'The URL to your ISR revalidation API endpoint'|t('incremental-static-regeneration'),
        placeholder:  'http://localhost:3000/api/revalidate',
        id:           'isrEndpoint',
        name:         'isrEndpoint',
        value:        settings['isrEndpoint'],
        errors:       settings.getErrors('isrEndpoint'),
        warning:      'isrEndpoint' in overrides ? macros.configWarning('isrEndpoint'),
        disabled:     'isrEndpoint' in overrides,
    }) }}

    {{ forms.passwordField({
        label:        'ISR secret'|t('incremental-static-regeneration'),
        instructions: 'The secret key we will send along the request in the `Authorization` header to your ISR endpoint'|t('incremental-static-regeneration'),
        placeholder:  '',
        id:           'isrSecret',
        name:         'isrSecret',
        value:        settings['isrSecret'],
        errors:       settings.getErrors('isrSecret'),
        warning:      'isrSecret' in overrides ? macros.configWarning('isrSecret'),
        disabled:     'isrSecret' in overrides,
    }) }}

    <h2>{{ 'Previews'|t('incremental-static-regeneration') }}</h2>

    <p>
        This requires some setting up in your front-end. If you are using NextJS you can follow the following documentation: <a
                href="https://nextjs.org/docs/advanced-features/preview-mode" target="_blank">https://nextjs.org/docs/advanced-features/preview-mode</a>
    </p>

    {{ forms.lightswitch({
        name:  "enablePreviews",
        id:  "enablePreviews",
        on:    settings['enablePreviews'],
        toggle: 'preview_settings',
        label: 'Enable previews that skip ISR',
        warning:  'enablePreviews' in overrides ? macros.configWarning('enablePreviews'),
        disabled: 'enablePreviews' in overrides,
    }) }}

    <div id="preview_settings"{% if not settings['enablePreviews'] %} class="hidden" {% endif %} style="padding-top: 20px;">
        {{ forms.textField({
            first:        true,
            label:        'Preview endpoint URL'|t('incremental-static-regeneration'),
            instructions: 'The URL for your preview front-end preview API endpoint'|t('incremental-static-regeneration'),
            placeholder:  'http://localhost:3000/api/preview',
            id:           'previewEndpoint',
            name:         'previewEndpoint',
            value:        settings['previewEndpoint'],
            errors:       settings.getErrors('previewEndpoint'),
            warning:      'previewEndpoint' in overrides ? macros.configWarning('previewEndpoint'),
            disabled:     'previewEndpoint' in overrides,
        }) }}

        {{ forms.passwordField({
            label:        'Preview secret'|t('incremental-static-regeneration'),
            instructions: 'The secret key we will send along the preview request in the `secret` query parameter'|t('incremental-static-regeneration'),
            placeholder:  '',
            id:           'previewSecret',
            name:         'previewSecret',
            value:        settings['previewSecret'],
            errors:       settings.getErrors('previewSecret'),
            warning:      'previewSecret' in overrides ? macros.configWarning('previewSecret'),
            disabled:     'previewSecret' in overrides,
        }) }}

        {{ forms.lightswitch({
            name:  "removeDefaultPreviewTarget",
            id:  "removeDefaultPreviewTarget",
            on:    settings['removeDefaultPreviewTarget'],
            label: 'Remove the default preview target from the preview target list. Useful if you are lazy and do not want to do it yourself',
            warning:  'removeDefaultPreviewTarget' in overrides ? macros.configWarning('removeDefaultPreviewTarget'),
            disabled: 'removeDefaultPreviewTarget' in overrides,
        }) }}
    </div>

    <h2>{{ 'Assets'|t('incremental-static-regeneration') }}</h2>

    {{ forms.lightswitch({
        name:  "enableAssets",
        id:  "enableAssets",
        on:    settings['enableAssets'],
        label: 'Enable re-validation of related entries when an asset is updated',
        warning:  'enableAssets' in overrides ? macros.configWarning('enableAssets'),
        disabled: 'enableAssets' in overrides,
    }) }}

    <h2>{{ 'Global Sets'|t('incremental-static-regeneration') }}</h2>

    {{ forms.lightswitch({
        name:  "enableGlobalSets",
        id:  "enableGlobalSets",
        on:    settings['enableGlobalSets'],
        toggle: 'global_set_settings',
        label: 'Enable re-validation of all entries when globalSets are updated',
        warning:  'enableGlobalSets' in overrides ? macros.configWarning('enableGlobalSets'),
        disabled: 'enableGlobalSets' in overrides,
    }) }}

    <div id="global_set_settings"{% if not settings['enableGlobalSets'] %} class="hidden" {% endif %}>
        {% if 'excludedGlobalSets' in overrides %}
            <p class="warning with-icon">{{ macros.configWarning('excludedGlobalSets') }}</p>
        {% endif %}

        <p class="light" style="padding-top: 20px;">{{ 'Exclude from ISR:'|t('incremental-static-regeneration') }}</p>
        <div class="field">
            <table id="entryTypes" class="shadow-box editable">
                <thead>
                <tr>
                    <th scope="col" class="thin">{{ 'Global'|t('incremental-static-regeneration') }}</th>
                    <th scope="col" class="thin"></th>
                </tr>
                </thead>
                <tbody>
                {% for global in craft.app.globals.allSets %}
                    <tr data-id="default">
                        <td>{{ global.name }} ({{ global.handle }})</td>
                        <td>
                            {{ forms.lightswitch({
                                name:  "excludedGlobalSets[]",
                                value: global.handle,
                                on:    global.handle in settings['excludedGlobalSets'],
                                small: true,
                            }) }}
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <h2>{{ 'Sections'|t('incremental-static-regeneration') }}</h2>

    {% if 'excludedSections' in overrides %}
        <p class="warning with-icon">{{ macros.configWarning('excludedSections') }}</p>
    {% endif %}

    <p class="light">{{ 'Exclude from ISR:'|t('incremental-static-regeneration') }}</p>
    <div class="field">
        <table id="entryTypes" class="shadow-box editable">
            <thead>
            <tr>
                <th scope="col" class="thin">{{ 'Type'|t('incremental-static-regeneration') }}</th>
                <th scope="col">{{ 'Section'|t('incremental-static-regeneration') }}</th>
                <th scope="col">{{ 'Entry Type'|t('incremental-static-regeneration') }}</th>
                <th scope="col" class="thin"></th>
            </tr>
            </thead>
            <tbody>
            {% for section in craft.app.getEntries().getEditableSections() %}
                {% for entryType in section.entryTypes %}
                    <tr data-id="default">
                        <th>{{ section.type|ucfirst }}</th>
                        <td>{{ section.name }} ({{ section.handle }})</td>
                        <td>{{ entryType.name }} ({{ entryType.handle }})</td>
                        <td>
                            {{ forms.lightswitch({
                                name:  "excludedSections["~section.handle~"][]",
                                value: entryType.handle,
                                on:    settings['excludedSections'][section.handle] is defined and entryType.handle in settings['excludedSections'][section.handle],
                                small: true,
                            }) }}
                        </td>
                    </tr>
                {% endfor %}
            {% endfor %}
            </tbody>
        </table>
    </div>
</div>
